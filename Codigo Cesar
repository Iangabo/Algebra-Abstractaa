#include <iostream>
#include <string.h> // strcspn
using namespace std;
#define LONGITUD_ALFABETO 26
#define INICIO_ALFABETO_MAYUSCULAS 65
#define INICIO_ALFABETO_MINUSCULAS 97
#define MAXIMA_LONGITUD_CADENA 5000
#define MOD(i, n) (i % n + n) % n // Calcular módulo positivo, gracias a
// https://stackoverflow.com/a/14997413/5032550

const char *alfabetoMinusculas = "abcdefghijklmnopqrstuvwxyz",
           *alfabetoMayusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
// Recibe un mensaje a cifrar y un búfer en donde pondrá el resultado, así como
// las rotaciones que debe dar
void cifrar(char *mensaje, char *destino, int rotaciones);

// Recibe un mensaje a descifrar y un búfer en donde pondrá el resultado, así
// como las rotaciones que debe dar
void descifrar(char *mensaje, char *destino, int rotaciones);

// Obtener el valor entero de un carácter:
// https://parzibyte.me/blog/2018/12/11/ord-chr-c/
int ord(char c);

int main(void) {
  // El original, el cifrado y luego el descifrado
  char mensaje[MAXIMA_LONGITUD_CADENA], mensajeCifrado[MAXIMA_LONGITUD_CADENA],
      mensajeDescifrado[MAXIMA_LONGITUD_CADENA];
  cout<<"Redacte su mensaje: "<<endl;
  // Esto es para obtener el mensaje y evitar desbordamientos; se puede ignorar
  fgets(mensaje, MAXIMA_LONGITUD_CADENA, stdin);
  /*Quitar el salto de línea*/ mensaje[strcspn(mensaje, "\r\n")] = 0;
  // ¿Cuántas rotaciones?
  int rotaciones;
  cout<<"Escribe el número de rotaciones que se darán a las letra: "<<endl;
  scanf("%d", &rotaciones);
  // Ahora sí ciframos y descriframos
  cout<<"El mensaje original es: "<< mensaje <<endl;
  cifrar(mensaje, mensajeCifrado, rotaciones);
  cout<<"El mensaje cifrado es: "<< mensajeCifrado<<endl;
  descifrar(mensajeCifrado, mensajeDescifrado, rotaciones);
  cout<<"El mensaje descifrado es: "<< mensajeDescifrado <<endl;
  return 0;
}

void cifrar(char *mensaje, char *destino, int rotaciones) {
  /*Recorrer cadena*/
  int i = 0;
  while (mensaje[i]) {
    char caracterActual = mensaje[i];
    int posicionOriginal = ord(caracterActual);
    if (!isalpha(caracterActual)) {
      destino[i] = caracterActual;
      i++;
      continue; // Ir a la siguiente iteración; por eso arriba aumentamos a i
    }
    if (isupper(caracterActual)) {
      destino[i] = alfabetoMayusculas[(posicionOriginal - INICIO_ALFABETO_MAYUSCULAS +rotaciones) % LONGITUD_ALFABETO];
    } else {

      destino[i] = alfabetoMinusculas[(posicionOriginal - INICIO_ALFABETO_MINUSCULAS + rotaciones) % LONGITUD_ALFABETO];
    }
    i++;
  }
}

void descifrar(char *mensaje, char *destino, int rotaciones) {
  /*Recorrer cadena*/
  int i = 0;
  while (mensaje[i]) {
    char caracterActual = mensaje[i];
    int posicionOriginal = ord(caracterActual);
    if (!isalpha(caracterActual)) {
      destino[i] = caracterActual;
      i++;
      continue; // Ir a la siguiente iteración; por eso arriba aumentamos a i
    }
    if (isupper(caracterActual)) {
      destino[i] = alfabetoMayusculas[MOD(
          posicionOriginal - INICIO_ALFABETO_MAYUSCULAS - rotaciones,
          LONGITUD_ALFABETO)];
    } else {
      destino[i] = alfabetoMinusculas[MOD(
          posicionOriginal - INICIO_ALFABETO_MINUSCULAS - rotaciones,
          LONGITUD_ALFABETO)];
    }
    i++;
  }
}
int ord(char c) { return (int)c; }
