#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
using namespace std;
#define LONGITUD_ALFABETO 26
#define INICIO_ALFABETO_MAYUSCULAS 65
#define INICIO_ALFABETO_MINUSCULAS 97
#define MAXIMA_LONGITUD_CADENA 5000
#define MOD(i, n) (i % n + n) % n


const char *alfabetoMinusculas = "abcdefghijklmnopqrstuvwxyz",
           *alfabetoMayusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void cifrar(char *mensaje, char *destino, int rotaciones);


void descifrar(char *mensaje, char *destino, int rotaciones);


int ord(char c);

int main(void) {

  char mensaje[MAXIMA_LONGITUD_CADENA], mensajeCifrado[MAXIMA_LONGITUD_CADENA],
      mensajeDescifrado[MAXIMA_LONGITUD_CADENA];
  cout<<"Redacte su mensaje: "<<endl;

  fgets(mensaje, MAXIMA_LONGITUD_CADENA, stdin);
mensaje[strcspn(mensaje, "\r\n")] = 0;

  int rotaciones;
  cout<<"Escribe el número de rotaciones que se darán a las letra: "<<endl;
  scanf("%d", &rotaciones);

  cout<<"El mensaje original es: "<< mensaje <<endl;
  cifrar(mensaje, mensajeCifrado, rotaciones);
  cout<<"El mensaje cifrado es: "<< mensajeCifrado<<endl;
  descifrar(mensajeCifrado, mensajeDescifrado, rotaciones);
  cout<<"El mensaje descifrado es: "<< mensajeDescifrado <<endl;
  return 0;
}

void cifrar(char *mensaje, char *destino, int rotaciones) {

  int i = 0;
  while (mensaje[i]) {
    char caracterActual = mensaje[i];
    int posicionOriginal = ord(caracterActual);
    if (!isalpha(caracterActual)) {
      destino[i] = caracterActual;
      i++;
      continue;
    }
    if (isupper(caracterActual)) {
      destino[i] = alfabetoMayusculas[(posicionOriginal - INICIO_ALFABETO_MAYUSCULAS +rotaciones) % LONGITUD_ALFABETO];
    } else {

      destino[i] = alfabetoMinusculas[(posicionOriginal - INICIO_ALFABETO_MINUSCULAS + rotaciones) % LONGITUD_ALFABETO];
    }
    i++;
  }
}

void descifrar(char *mensaje, char *destino, int rotaciones) {

  int i = 0;
  while (mensaje[i]) {
    char caracterActual = mensaje[i];
    int posicionOriginal = ord(caracterActual);
    if (!isalpha(caracterActual)) {
      destino[i] = caracterActual;
      i++;
      continue;
    }
    if (isupper(caracterActual)) {
      destino[i] = alfabetoMayusculas[MOD(
          posicionOriginal - INICIO_ALFABETO_MAYUSCULAS - rotaciones,
          LONGITUD_ALFABETO)];
    } else {
      destino[i] = alfabetoMinusculas[MOD(
          posicionOriginal - INICIO_ALFABETO_MINUSCULAS - rotaciones,
          LONGITUD_ALFABETO)];
    }
    i++;
  }
}
int ord(char c) { return (int)c; }


